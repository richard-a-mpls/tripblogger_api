# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApiSession(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, identity_token: str=None, identity_issuer: str=None, api_token: str=None, api_token_expiration: int=None, user_profile: str=None):  # noqa: E501
        """ApiSession - a model defined in Swagger

        :param identity_token: The identity_token of this ApiSession.  # noqa: E501
        :type identity_token: str
        :param identity_issuer: The identity_issuer of this ApiSession.  # noqa: E501
        :type identity_issuer: str
        :param api_token: The api_token of this ApiSession.  # noqa: E501
        :type api_token: str
        :param api_token_expiration: The api_token_expiration of this ApiSession.  # noqa: E501
        :type api_token_expiration: int
        :param user_profile: The user_profile of this ApiSession.  # noqa: E501
        :type user_profile: str
        """
        self.swagger_types = {
            'identity_token': str,
            'identity_issuer': str,
            'api_token': str,
            'api_token_expiration': int,
            'user_profile': str
        }

        self.attribute_map = {
            'identity_token': 'identity_token',
            'identity_issuer': 'identity_issuer',
            'api_token': 'api_token',
            'api_token_expiration': 'api_token_expiration',
            'user_profile': 'user_profile'
        }
        self._identity_token = identity_token
        self._identity_issuer = identity_issuer
        self._api_token = api_token
        self._api_token_expiration = api_token_expiration
        self._user_profile = user_profile

    @classmethod
    def from_dict(cls, dikt) -> 'ApiSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApiSession of this ApiSession.  # noqa: E501
        :rtype: ApiSession
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_token(self) -> str:
        """Gets the identity_token of this ApiSession.


        :return: The identity_token of this ApiSession.
        :rtype: str
        """
        return self._identity_token

    @identity_token.setter
    def identity_token(self, identity_token: str):
        """Sets the identity_token of this ApiSession.


        :param identity_token: The identity_token of this ApiSession.
        :type identity_token: str
        """

        self._identity_token = identity_token

    @property
    def identity_issuer(self) -> str:
        """Gets the identity_issuer of this ApiSession.


        :return: The identity_issuer of this ApiSession.
        :rtype: str
        """
        return self._identity_issuer

    @identity_issuer.setter
    def identity_issuer(self, identity_issuer: str):
        """Sets the identity_issuer of this ApiSession.


        :param identity_issuer: The identity_issuer of this ApiSession.
        :type identity_issuer: str
        """

        self._identity_issuer = identity_issuer

    @property
    def api_token(self) -> str:
        """Gets the api_token of this ApiSession.


        :return: The api_token of this ApiSession.
        :rtype: str
        """
        return self._api_token

    @api_token.setter
    def api_token(self, api_token: str):
        """Sets the api_token of this ApiSession.


        :param api_token: The api_token of this ApiSession.
        :type api_token: str
        """

        self._api_token = api_token

    @property
    def api_token_expiration(self) -> int:
        """Gets the api_token_expiration of this ApiSession.


        :return: The api_token_expiration of this ApiSession.
        :rtype: int
        """
        return self._api_token_expiration

    @api_token_expiration.setter
    def api_token_expiration(self, api_token_expiration: int):
        """Sets the api_token_expiration of this ApiSession.


        :param api_token_expiration: The api_token_expiration of this ApiSession.
        :type api_token_expiration: int
        """

        self._api_token_expiration = api_token_expiration

    @property
    def user_profile(self) -> str:
        """Gets the user_profile of this ApiSession.


        :return: The user_profile of this ApiSession.
        :rtype: str
        """
        return self._user_profile

    @user_profile.setter
    def user_profile(self, user_profile: str):
        """Sets the user_profile of this ApiSession.


        :param user_profile: The user_profile of this ApiSession.
        :type user_profile: str
        """

        self._user_profile = user_profile
