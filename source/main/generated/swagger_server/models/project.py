# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.photo import Photo  # noqa: F401,E501
from swagger_server.models.project_day import ProjectDay  # noqa: F401,E501
from swagger_server import util


class Project(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, profile_id: str=None, summary: str=None, description: str=None, location: str=None, published: bool=None, showcase_photo: Photo=None, share_with: str=None, project_days: List[ProjectDay]=None):  # noqa: E501
        """Project - a model defined in Swagger

        :param id: The id of this Project.  # noqa: E501
        :type id: str
        :param profile_id: The profile_id of this Project.  # noqa: E501
        :type profile_id: str
        :param summary: The summary of this Project.  # noqa: E501
        :type summary: str
        :param description: The description of this Project.  # noqa: E501
        :type description: str
        :param location: The location of this Project.  # noqa: E501
        :type location: str
        :param published: The published of this Project.  # noqa: E501
        :type published: bool
        :param showcase_photo: The showcase_photo of this Project.  # noqa: E501
        :type showcase_photo: Photo
        :param share_with: The share_with of this Project.  # noqa: E501
        :type share_with: str
        :param project_days: The project_days of this Project.  # noqa: E501
        :type project_days: List[ProjectDay]
        """
        self.swagger_types = {
            'id': str,
            'profile_id': str,
            'summary': str,
            'description': str,
            'location': str,
            'published': bool,
            'showcase_photo': Photo,
            'share_with': str,
            'project_days': List[ProjectDay]
        }

        self.attribute_map = {
            'id': '_id',
            'profile_id': 'profile_id',
            'summary': 'summary',
            'description': 'description',
            'location': 'location',
            'published': 'published',
            'showcase_photo': 'showcase_photo',
            'share_with': 'share_with',
            'project_days': 'project_days'
        }
        self._id = id
        self._profile_id = profile_id
        self._summary = summary
        self._description = description
        self._location = location
        self._published = published
        self._showcase_photo = showcase_photo
        self._share_with = share_with
        self._project_days = project_days

    @classmethod
    def from_dict(cls, dikt) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project of this Project.  # noqa: E501
        :rtype: Project
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Project.


        :return: The id of this Project.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Project.


        :param id: The id of this Project.
        :type id: str
        """

        self._id = id

    @property
    def profile_id(self) -> str:
        """Gets the profile_id of this Project.


        :return: The profile_id of this Project.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id: str):
        """Sets the profile_id of this Project.


        :param profile_id: The profile_id of this Project.
        :type profile_id: str
        """

        self._profile_id = profile_id

    @property
    def summary(self) -> str:
        """Gets the summary of this Project.


        :return: The summary of this Project.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary: str):
        """Sets the summary of this Project.


        :param summary: The summary of this Project.
        :type summary: str
        """

        self._summary = summary

    @property
    def description(self) -> str:
        """Gets the description of this Project.


        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Project.


        :param description: The description of this Project.
        :type description: str
        """

        self._description = description

    @property
    def location(self) -> str:
        """Gets the location of this Project.


        :return: The location of this Project.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this Project.


        :param location: The location of this Project.
        :type location: str
        """

        self._location = location

    @property
    def published(self) -> bool:
        """Gets the published of this Project.


        :return: The published of this Project.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published: bool):
        """Sets the published of this Project.


        :param published: The published of this Project.
        :type published: bool
        """

        self._published = published

    @property
    def showcase_photo(self) -> Photo:
        """Gets the showcase_photo of this Project.


        :return: The showcase_photo of this Project.
        :rtype: Photo
        """
        return self._showcase_photo

    @showcase_photo.setter
    def showcase_photo(self, showcase_photo: Photo):
        """Sets the showcase_photo of this Project.


        :param showcase_photo: The showcase_photo of this Project.
        :type showcase_photo: Photo
        """

        self._showcase_photo = showcase_photo

    @property
    def share_with(self) -> str:
        """Gets the share_with of this Project.


        :return: The share_with of this Project.
        :rtype: str
        """
        return self._share_with

    @share_with.setter
    def share_with(self, share_with: str):
        """Sets the share_with of this Project.


        :param share_with: The share_with of this Project.
        :type share_with: str
        """
        allowed_values = ["private", "public", "connections"]  # noqa: E501
        if share_with not in allowed_values:
            raise ValueError(
                "Invalid value for `share_with` ({0}), must be one of {1}"
                .format(share_with, allowed_values)
            )

        self._share_with = share_with

    @property
    def project_days(self) -> List[ProjectDay]:
        """Gets the project_days of this Project.


        :return: The project_days of this Project.
        :rtype: List[ProjectDay]
        """
        return self._project_days

    @project_days.setter
    def project_days(self, project_days: List[ProjectDay]):
        """Sets the project_days of this Project.


        :param project_days: The project_days of this Project.
        :type project_days: List[ProjectDay]
        """

        self._project_days = project_days
