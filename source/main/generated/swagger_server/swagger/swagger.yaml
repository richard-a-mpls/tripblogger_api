openapi: 3.0.2
info:
  title: API Title
  version: "1.0"
servers:
- url: http://localhost:8080/v1
paths:
  /authorize:
    description: authorize based on identity token
    post:
      tags:
      - authorize
      summary: authorize a session for token
      description: authorize based on a centralized token
      operationId: authorize
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationRequest'
        required: true
      responses:
        "200":
          description: OK
      x-openapi-router-controller: swagger_server.controllers.authorize_controller
  /logout/:
    description: log out of the API session
    get:
      tags:
      - logout
      summary: de-authorize a session for token
      description: de-authorize a session for token
      operationId: logout
      parameters:
      - name: apiToken
        in: query
        description: ID of profile to return
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
      x-openapi-router-controller: swagger_server.controllers.logout_controller
  /profile:
    description: add a profile
    get:
      tags:
      - profile
      summary: get a profile based on authorized session
      operationId: get_session_profile
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
      security:
      - BearerAuth: []
      x-openapi-router-controller: swagger_server.controllers.profile_controller
    post:
      tags:
      - profile
      summary: create a profile
      description: create a profile
      operationId: add_profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      x-openapi-router-controller: swagger_server.controllers.profile_controller
  /profile/{profileId}:
    description: profile operations
    get:
      tags:
      - profile
      summary: get a profile by id
      description: get that profile
      operationId: get_profile
      parameters:
      - name: profileId
        in: path
        description: ID of profile to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
      security:
      - BearerAuth: []
      x-openapi-router-controller: swagger_server.controllers.profile_controller
    patch:
      tags:
      - profile
      summary: update attributes of a profile
      operationId: patch_profile
      parameters:
      - name: profileId
        in: path
        description: ID of profile to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
      security:
      - BearerAuth: []
      x-openapi-router-controller: swagger_server.controllers.profile_controller
  /me/projects:
    description: project related calls
    get:
      tags:
      - project
      summary: get a project based on authorized session
      operationId: get_session_projects
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
                x-content-type: application/json
      security:
      - BearerAuth: []
      x-openapi-router-controller: swagger_server.controllers.project_controller
    post:
      tags:
      - project
      summary: create a project
      description: create a project
      operationId: add_project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        "200":
          description: OK
      security:
      - BearerAuth: []
      x-openapi-router-controller: swagger_server.controllers.project_controller
  /projects/{project_id}:
    description: project operations
    get:
      tags:
      - project
      summary: get a project by id
      description: get that project
      operationId: get_project
      parameters:
      - name: project_id
        in: path
        description: ID of project to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      security:
      - BearerAuth: []
      x-openapi-router-controller: swagger_server.controllers.project_controller
components:
  schemas:
    Profile:
      required:
      - profile_name
      type: object
      properties:
        _id:
          type: string
        profile_name:
          type: string
        identity_issuer:
          type: string
        identity_id:
          type: string
        connections:
          type: array
          items:
            type: string
      example:
        profile_name: profile_name
        identity_id: identity_id
        identity_issuer: identity_issuer
        _id: _id
        connections:
        - connections
        - connections
    AuthorizationRequest:
      required:
      - identity_token
      type: object
      properties:
        identity_token:
          type: string
    ApiSession:
      type: object
      properties:
        identity_token:
          type: string
        identity_issuer:
          type: string
        api_token:
          type: string
        api_token_expiration:
          type: integer
        user_profile:
          type: string
    Project:
      type: object
      properties:
        _id:
          type: string
        profile_id:
          type: string
        summary:
          type: string
        description:
          type: string
        location:
          type: string
        published:
          type: boolean
        share_with:
          type: string
          enum:
          - private
          - public
          - connections
        project_days:
          type: array
          items:
            $ref: '#/components/schemas/ProjectDay'
      example:
        summary: summary
        project_days:
        - summary: summary
          date: date
          description: description
          location: location
          _id: _id
          photos:
          - summary: summary
            description: description
            location: location
            _id: _id
          - summary: summary
            description: description
            location: location
            _id: _id
        - summary: summary
          date: date
          description: description
          location: location
          _id: _id
          photos:
          - summary: summary
            description: description
            location: location
            _id: _id
          - summary: summary
            description: description
            location: location
            _id: _id
        profile_id: profile_id
        description: description
        share_with: private
        location: location
        _id: _id
        published: true
    ProjectDay:
      type: object
      properties:
        _id:
          type: string
        summary:
          type: string
        description:
          type: string
        location:
          type: string
        date:
          type: string
        photos:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
      example:
        summary: summary
        date: date
        description: description
        location: location
        _id: _id
        photos:
        - summary: summary
          description: description
          location: location
          _id: _id
        - summary: summary
          description: description
          location: location
          _id: _id
    Photo:
      type: object
      properties:
        _id:
          type: string
        summary:
          type: string
        description:
          type: string
        location:
          type: string
      example:
        summary: summary
        description: description
        location: location
        _id: _id
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      x-bearerInfoFunc: swagger_server.controllers.authorization_controller.check_BearerAuth

